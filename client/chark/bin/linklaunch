#!/bin/bash
# linklaunch: Deep link launcher for MyCHIPs app testing
# 
# Usage: 
#   echo "https://mychips.org/some/path" | ./linklaunch [options]
#   ./linklaunch [options] "https://mychips.org/some/path"
#   ssh admin@server.chip mychips/bin/adminticket -i p1234 -q |
#     ./linklaunch [options]
#
# Options:
#   -h, --help     Show this help message
#   -l, --list     List available devices
#   -d DEVICE      Specify device/emulator by id
#   -p PLATFORM    Target platform: 'android' or 'ios' (default: android)

APP_PACKAGE=org.mychips.chark
MAIN_ACTIVITY=org.mychips.chark.MainActivity
PLATFORM=${PLATFORM:-android}

function show_help {
  grep "^# " "$0" | cut -c 3-
  exit 0
}

function list_devices {
  echo "== Android Devices =="
  if command -v adb >/dev/null 2>&1; then
    adb devices -l | grep -v "List of devices"
  else
    echo "adb not found. Install Android SDK platform tools."
  fi
  
  echo -e "\n== iOS Simulators =="
  if command -v xcrun >/dev/null 2>&1; then
    xcrun simctl list devices | grep -v "Unavailable"
  else
    echo "xcrun not found. Install Xcode command line tools."
  fi
  exit 0
}

function check_dependencies {
  local missing=0
  
  echo "Checking dependencies..."
  
  if ! command -v adb >/dev/null 2>&1 && [ "$platform" = "android" ]; then
    echo "Warning: adb not found. Android device launching will not work."
    missing=1
  fi
  
  if ! command -v xcrun >/dev/null 2>&1 && [ "$platform" = "ios" ]; then
    echo "Warning: xcrun not found. iOS simulator launching will not work."
    missing=1
  fi
  
  if [ "$missing" -eq 1 ]; then
    echo "Some dependencies are missing. Continuing anyway..."
  else
    echo "All dependencies present."
  fi
}

function launch_android {
  local link="$1"
  local esclink=$(echo "$link" | sed -e 's/&/\\&/g')
  
  echo "Launching on Android device: $device"
  if ! adb -s "$device" shell am start -W -a android.intent.action.VIEW -d "$esclink" -n "$APP_PACKAGE/$MAIN_ACTIVITY"; then
    echo "Error: Failed to launch link on Android device."
    return 1
  fi
  
  echo "Success! Link launched on Android device."
  return 0
}

function launch_ios {
  local link="$1"
  local device_to_use="$device"
  
  # Fallback to "booted" if device is empty
  if [ -z "$device_to_use" ]; then
    device_to_use="booted"
    echo "Device ID was empty, falling back to 'booted' identifier"
  fi
  
  echo "Launching on iOS simulator: $device_to_use"
  if ! xcrun simctl openurl "$device_to_use" "$link"; then
    echo "Error: Failed to launch link on iOS simulator."
    return 1
  fi
  
  echo "Success! Link launched on iOS simulator."
  return 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      ;;
    -l|--list)
      echo "Available iOS simulators:"
      xcrun simctl list devices | grep -v unavailable
      echo -e "\nAvailable Android devices:"
      adb devices
      exit 0
      ;;
    -d)
      DEVICE="$2"
      shift 2
      ;;
    -p)
      PLATFORM="$2"
      shift 2
      ;;
    *)
      if [[ -z "$URL" ]]; then
        URL="$1"
      fi
      shift
      ;;
  esac
done

# If no URL provided as argument, try to read from stdin
if [[ -z "$URL" ]]; then
  if [ ! -t 0 ]; then
    URL=$(cat)
  else
    echo "Error: No URL provided"
    show_help
  fi
fi

# Construct the URL based on the input
if [[ "$URL" == https://* ]]; then
  # Keep HTTPS URLs as is
  DEEP_LINK="$URL"
else
  # Convert other URLs to HTTPS format
  DEEP_LINK="https://mychips.org/${URL#mychips://}"
fi

# Auto-detect platform if not specified
if [ "$PLATFORM" = "auto" ]; then
  if command -v adb >/dev/null 2>&1; then
    avdlist="$(adb devices | grep -v 'List of devices' | grep 'device$')"
    if [ -n "$avdlist" ]; then
      PLATFORM="android"
      if [ -z "$DEVICE" ]; then
        DEVICE=$(echo "$avdlist" | head -n 1 | awk '{print $1}')
      fi
    elif command -v xcrun >/dev/null 2>&1; then
      PLATFORM="ios"
      if [ -z "$DEVICE" ]; then
        # Get the first booted simulator ID, if any
        booted_sim=$(xcrun simctl list devices | grep "(Booted)" | head -1 | awk -F"[()]" '{print $2}')
        if [ -n "$booted_sim" ]; then
          DEVICE="$booted_sim"  # Use the specific booted device ID
          echo "Auto-detected booted iOS simulator: $DEVICE"
        else
          # No booted simulator found, use generic "booted" identifier
          DEVICE="booted"
          echo "No specific booted simulator found. Using generic 'booted' identifier."
        fi
      fi
    else
      echo "Error: No Android or iOS devices found and no platform specified."
      exit 1
    fi
  elif command -v xcrun >/dev/null 2>&1; then
    PLATFORM="ios"
    if [ -z "$DEVICE" ]; then
      # Get the first booted simulator ID, if any
      booted_sim=$(xcrun simctl list devices | grep "(Booted)" | head -1 | awk -F"[()]" '{print $2}')
      if [ -n "$booted_sim" ]; then
        DEVICE="$booted_sim"  # Use the specific booted device ID
        echo "Auto-detected booted iOS simulator: $DEVICE"
      else
        # No booted simulator found, use generic "booted" identifier
        DEVICE="booted"
        echo "No specific booted simulator found. Using generic 'booted' identifier."
      fi
    fi
  else
    echo "Error: Could not auto-detect platform. Please specify with -p."
    exit 1
  fi
fi

# Fix: Get the device ID one more time right before launching
# This ensures we have the latest booted device even if it was missed earlier
if [ "$PLATFORM" = "ios" ] && [ -z "$DEVICE" ]; then
  DEVICE=$(xcrun simctl list devices | grep "(Booted)" | head -1 | awk -F"[()]" '{print $2}')
  echo "Auto-detected iOS simulator: $DEVICE"
fi

check_dependencies

# Launch based on platform
case $PLATFORM in
  ios)
    launch_ios "$DEEP_LINK"
    ;;
  android)
    launch_android "$DEEP_LINK"
    ;;
  *)
    echo "Error: Unsupported platform: $PLATFORM"
    exit 1
    ;;
esac
