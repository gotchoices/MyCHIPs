#!/bin/env node
//Copyright MyCHIPs.org; See license in root of this package
// -----------------------------------------------------------------------------
//Initialize an empty database with sample testing data
//TODO:
//X- Deprecate mc_admin
//X- Can call database directly with json import data?
//- Build site key (old mc_admin function)?
//- 

const Settings = require('../settings')
const { MachineIP, UserPort, PeerPort, DatabaseName, DBAdmin, Log } = Settings

var database = process.env.MYCHIPSDB || 'mychips'
var user = DBAdmin || process.env.MYCHIPSDBA || process.env.USER
console.log("database:", database, "user:", user, "MachineIP:", MachineIP, "uport:", UserPort, "pport:", PeerPort)

var fs = require('fs')
var log = Log('Kickstart')
var { dbClient } = require("wyseman")
const dbConfig = {
  database, user, log,
  listen: "DummyChannel",		//Cause immediate connection to DB, rather than deferred
  schema: __dirname + "/../../lib/schema.sql"
}

var pending = 0
var db = new dbClient(dbConfig)

var queryList = []
//queryList.push({q:"select base.parmset('mychips','mobi_host',$1::inet)", a:[Settings.MachineIP]})

const fileList = ["org.json", "user1.json", "user2.json", "user3.json"].forEach(file=>{
  let fileData = fs.readFileSync(__dirname + '/' + file)
    , jsonData = JSON.parse(fileData)
  queryList.push({q:"select json.import($1::jsonb) as record;", a:[jsonData]})
})

//For user agent model testing:
//queryList.push({q:"select base.parmset('agent','interval',$1::int)", a:[1000]})
//queryList.push({q:"select base.parmset('agent','addclient',$1::float)", a:[0.10]})
//queryList.push({q:"select base.parmset('agent','addvendor',$1::float)", a:[0.20]})

//Set org.json entity as the site admin
queryList.push({q:"select base.parmset('mychips','site_ent',$1::int)", a:[100]})

queryList.push({q:"update mychips.users set user_host = $1, user_port=$2 where user_host is null", a:[Settings.MachineIP, Settings.UserPort]})
queryList.push({q:"update mychips.peers set peer_host = $1, peer_port=$2 where peer_host is null", a:[Settings.MachineIP, Settings.PeerPort]})

//For testing tallies:
let q1 = "update mychips.users_v set serv_id=$1, peer_port=$2 where id = $3;"
queryList.push({q:q1, a:['server0', 65430, 'p1000']})
queryList.push({q:q1, a:['server1', 65431, 'p1001']})
queryList.push({q:q1, a:['server2', 65432, 'p1002']})

queryList.forEach(elem=>{
  pending++
  let { q, a } = elem
  db.query(q, a, (err, res) => {
    if (err) console.log("Error:", err.message, "\n  query:", q)
//console.log("res:", res)
    if (!(--pending)) db.disconnect()
  })
})
